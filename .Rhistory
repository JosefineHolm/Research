care$positivect
care$positived=rowSums(care[,c("hgroomd","bgroomd","ghgroomd","gbgroomd","manenrichd")])
care$positived
pdm1=gls(positived~cond.f, data=care, na.action=na.omit, method="ML")
summary(pdm1)
positived~cond.f, random=~1|id,data=care, na.action=na.omit, method="ML")
pdm2=lme(positived~cond.f, random=~1|id,data=care, na.action=na.omit, method="ML")
summary(out2)
summary(pdm2)
summary(m2)
anova(pdm1,pdm2)
op=par(mfrow=c(2,2), mar=c(5,4,1,2))
plot(pdm2, add.smooth=FALSE, which=1)
E=resid(m2)
hist(E,xlab="residuals", main="")
plot(care$cond.f, E, xlab="Treatment", ylab="residuals")
plot(care$id, E, xlab="id", ylab="residuals")
#trying the other residuals plot clay showed
E1<-residuals(pdm2)
plot(filter(care, !is.na(neutralct)) %>% dplyr::select(id),
E1, xlab="id", ylab="Residuals")
plot(filter(care, !is.na(neutrald)) %>% dplyr::select(id),
E1, xlab="id", ylab="Residuals")
plot(filter(care, !is.na(neutrald)) %>% dplyr::select(cond.f),
E1, xlab="id", ylab="Residuals")
qqnorm(residuals(pdm2))
qqline(residuals(m2))
ad.test(residuals(m2))#this one says error
ad.test(residuals(pdm2))#this one says error
summary(pdm2)
lsmeans(pdm2,pairwise~cond.f)#This one schould be able to show how the behaviors have changes
x1 <- group_by(care, cond.f, id) %>%
summarize(m.positived = mean(positived, na.rm = TRUE), # na.rm = TRUE to remove missing values
s.positived=sd(positved, na.rm = TRUE),  # na.rm = TRUE to remove missing values
n = sum(!is.na(positved)), # of observations, excluding NAs.
se.positived=s.positived/sqrt(n))
x1 <- group_by(care, cond.f, id) %>%
summarize(m.positived = mean(positived, na.rm = TRUE), # na.rm = TRUE to remove missing values
s.positived=sd(positived, na.rm = TRUE),  # na.rm = TRUE to remove missing values
n = sum(!is.na(positived)), # of observations, excluding NAs.
se.positived=s.positived/sqrt(n))
x1
ggplot(data=x1,
aes(x=cond.f, y=m.positived, fill=id, label=m.positived)) +
geom_bar(stat="identity", position=position_dodge(), color = "black") +
geom_errorbar(aes(ymin=m.positived, ymax=m.positived+se.positived), width=0.2,
position=position_dodge(0.9)) +
scale_fill_manual(values=c("black","white", "light grey", "dark grey")) +
xlab("ID") +
ylab("Number of neutral behaviors") +
ylim(0,15) +
labs(fill="id") +
theme_bw() +
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
legend.title=element_text(size=6),
legend.key=element_blank(),
legend.position=c(0.5,0.95),
legend.text=element_text(size=8),
legend.background=element_blank(),
legend.direction="horizontal",
legend.key.size=unit(0.3, "cm"),
axis.title.y=element_text(size=8),
axis.title.x=element_text(size=8),
axis.text.x=element_text(size=8))
#load data
care=read.table(file="caredata.csv", header=TRUE, sep=",")
names(care)
str(care)
#Packages used
library(nlme)
library(dplyr)
#packages gotten from last years project
library(lattice)
install.packages("lme4")
care$cond.f=as.factor(care$cond)
library(MuMIn)
str(care)
install.packages("lsmeans")
install.packages("MuMIn")
install.packages("ggplot2")
library(ggplot2)
#Putting the 4 condition in as a factor
library(lsmeans)
install.packages("dplyr")
library(dplyr)
install.packages("lsmeans")
install.packages("MuMIn")
install.packages("ggplot2")
install.packages("MuMIn")
install.packages("ggplot2")
#Making a subset only consistent of integers/numbers
xx=care[,sapply(care,is.integer)] #this is to make a subset only of the integers (numbers)
xx
care=read.table(file="caredata.csv", header=TRUE, sep=",")
names(care)
str(care)
#Packages used
library(nlme)
library(lattice)
library(dplyr)
#packages gotten from last years project
install.packages("lme4")
library(lme4)
library(geepack)
install.packages("lsmeans")
library(lsmeans)
install.packages("dplyr")
library(dplyr)
install.packages("MuMIn")
library(MuMIn)
install.packages("ggplot2")
library(ggplot2)
#Putting the 4 condition in as a factor
care$cond.f=as.factor(care$cond)
str(care)
#Making a subset only consistent of integers/numbers
xx=care[,sapply(care,is.integer)] #this is to make a subset only of the integers (numbers)
xx
install.packages("lsmeans")
install.packages("MuMIn")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("dplyr")
m1=gls(foodgrunt~cond.f, data=care, na.action=na.omit, method="ML")
summary(m1)
m2=lme(foodgrunt~cond.f, random=~1|id,data=care, na.action=na.omit, method="ML")
summary(m2)
anova(m1,m2)
op=par(mfrow=c(2,2), mar=c(5,4,1,2))
plot(m2, add.smooth=FALSE, which=1)
E=resid(m2)
hist(E,xlab="residuals", main="")
plot(care$cond.f, E, xlab="Treatment", ylab="residuals")
plot(care$id, E, xlab="id", ylab="residuals")
qqnorm(residuals(m2))
qqline(residuals(m2))
ad.test(residuals(m2))#this one says error
summary(m2)
lsmeans(m2,pairwise~cond.f)#This one schould be able to show how the behaviors have changes
x1 <- group_by(care, cond.f, id) %>%
summarize(m.foodgrunt = mean(foodgrunt, na.rm = TRUE), # na.rm = TRUE to remove missing values
s.foodgrunt=sd(foodgrunt, na.rm = TRUE),  # na.rm = TRUE to remove missing values
n = sum(!is.na(foodgrunt)), # of observations, excluding NAs.
se.foodgrunt=s.foodgrunt/sqrt(n))
x1
ggplot(data=x1,
aes(x=cond.f, y=m.foodgrunt, fill=id, label=m.foodgrunt)) +
geom_bar(stat="identity", position=position_dodge(), color = "black") +
geom_errorbar(aes(ymin=m.foodgrunt, ymax=m.foodgrunt+se.foodgrunt), width=0.2,
position=position_dodge(0.9)) +
scale_fill_manual(values=c("black","white", "light grey", "dark grey")) +
xlab("ID") +
ylab("Number of foodgrunt") +
ylim(0,15) +
labs(fill="id") +
theme_bw() +
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
legend.title=element_text(size=6),
legend.key=element_blank(),
legend.position=c(0.5,0.95),
legend.text=element_text(size=8),
legend.background=element_blank(),
legend.direction="horizontal",
legend.key.size=unit(0.3, "cm"),
axis.title.y=element_text(size=8),
axis.title.x=element_text(size=8),
axis.text.x=element_text(size=8))
m1=gls(grunt~cond.f, data=care, na.action=na.omit, method="ML")
summary(m1)
m2=lme(grunt~cond.f, random=~1|id,data=care, na.action=na.omit, method="ML")
summary(m2)
anova(m1,m2)
#Since the model with the random factor had a lower IAC score we wanna use that
#Plotting residuals for m2 to check if we can use this model
op=par(mfrow=c(2,2), mar=c(5,4,1,2))
plot(m2, add.smooth=FALSE, which=1)
E=resid(m2)
hist(E,xlab="residuals", main="")
plot(care$cond.f, E, xlab="Treatment", ylab="residuals")
plot(care$id, E, xlab="id", ylab="residuals")
qqnorm(residuals(m2))
qqline(residuals(m2))
ad.test(residuals(m2))#this one says error
summary(m2)
lsmeans(m2,pairwise~cond.f)#This one schould be able to show how the behaviors have changes
x1 <- group_by(care, cond.f, id) %>%
summarize(m.grunt = mean(grunt, na.rm = TRUE), # na.rm = TRUE to remove missing values
s.grunt=sd(grunt, na.rm = TRUE),  # na.rm = TRUE to remove missing values
n = sum(!is.na(grunt)), # of observations, excluding NAs.
se.grunt=s.grunt/sqrt(n))
ggplot(data=x1,
aes(x=cond.f, y=m.grunt, fill=id, label=m.grunt)) +
geom_bar(stat="identity", position=position_dodge(), color = "black") +
geom_errorbar(aes(ymin=m.grunt, ymax=m.grunt+se.grunt), width=0.2,
position=position_dodge(0.9)) +
scale_fill_manual(values=c("black","white", "light grey", "dark grey")) +
xlab("ID") +
ylab("Number of grunt") +
ylim(0,15) +
labs(fill="id") +
theme_bw() +
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
legend.title=element_text(size=6),
legend.key=element_blank(),
legend.position=c(0.5,0.95),
legend.text=element_text(size=8),
legend.background=element_blank(),
legend.direction="horizontal",
legend.key.size=unit(0.3, "cm"),
axis.title.y=element_text(size=8),
axis.title.x=element_text(size=8),
axis.text.x=element_text(size=8))
m1=gls(lipsmack~cond.f, data=care, na.action=na.omit, method="ML")
summary(m1)
m2=lme(lipsmack~cond.f, random=~1|id,data=care, na.action=na.omit, method="ML")
summary(m2)
anova(m1,m2)
#Since the model with the random factor had a lower IAC score we wanna use that
#Plotting residuals for m2 to check if we can use this model
op=par(mfrow=c(2,2), mar=c(5,4,1,2))
plot(m2, add.smooth=FALSE, which=1)
E=resid(m2)
hist(E,xlab="residuals", main="")
plot(care$cond.f, E, xlab="Treatment", ylab="residuals")
plot(care$id, E, xlab="id", ylab="residuals")
qqnorm(residuals(m2))
qqline(residuals(m2))
ad.test(residuals(m2))#this one says error
summary(m2)
lsmeans(m2,pairwise~cond.f)#This one schould be able to show how the behaviors have changes
x1 <- group_by(care, cond.f, id) %>%
summarize(m.lipsmack = mean(lipsmack, na.rm = TRUE), # na.rm = TRUE to remove missing values
s.lipsmack=sd(lipsmack, na.rm = TRUE),  # na.rm = TRUE to remove missing values
n = sum(!is.na(lipsmack)), # of observations, excluding NAs.
se.lipsmack=s.lipsmack/sqrt(n))
x1
ggplot(data=x1,
aes(x=cond.f, y=m.lipsmack, fill=id, label=m.lipsmack)) +
geom_bar(stat="identity", position=position_dodge(), color = "black") +
geom_errorbar(aes(ymin=m.lipsmack, ymax=m.lipsmack+se.lipsmack), width=0.2,
position=position_dodge(0.9)) +
scale_fill_manual(values=c("black","white", "light grey", "dark grey")) +
xlab("ID") +
ylab("Number of lipsmacks") +
ylim(0,15) +
labs(fill="id") +
theme_bw() +
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
legend.title=element_text(size=6),
legend.key=element_blank(),
legend.position=c(0.5,0.95),
legend.text=element_text(size=8),
legend.background=element_blank(),
legend.direction="horizontal",
legend.key.size=unit(0.3, "cm"),
axis.title.y=element_text(size=8),
axis.title.x=element_text(size=8),
axis.text.x=element_text(size=8))
m1=gls(pbaboon~cond.f, data=care, na.action=na.omit, method="ML")
summary(m1)
m2=lme(pbaboon~cond.f, random=~1|id,data=care, na.action=na.omit, method="ML")
summary(m2)
anova(m1,m2)
#Since the model with the random factor had a lower IAC score we wanna use that
#Plotting residuals for m2 to check if we can use this model
op=par(mfrow=c(2,2), mar=c(5,4,1,2))
plot(m2, add.smooth=FALSE, which=1)
E=resid(m2)
hist(E,xlab="residuals", main="")
plot(care$cond.f, E, xlab="Treatment", ylab="residuals")
plot(care$id, E, xlab="id", ylab="residuals")
plot(care$cond.f, E, xlab="Treatment", ylab="residuals")
plot(care$id, E, xlab="id", ylab="residuals")
qqnorm(residuals(m2))
qqline(residuals(m2))
ad.test(residuals(m2))#this one says error
summary(m2)
lsmeans(m2,pairwise~cond.f)#This one schould be able to show how the behaviors have changes
x1 <- group_by(care, cond.f, id) %>%
summarize(m.pbaboon = mean(pbaboon, na.rm = TRUE), # na.rm = TRUE to remove missing values
s.pbaboon=sd(pbaboon), na.rm = TRUE),  # na.rm = TRUE to remove missing values
n = sum(!is.na(pbaboon)), # of observations, excluding NAs.
se.pbaboon=s.pbaboon/sqrt(n))
x1 <- group_by(care, cond.f, id) %>%
summarize(m.pbaboon = mean(pbaboon, na.rm = TRUE), # na.rm = TRUE to remove missing values
s.pbaboon=sd(pbaboon, na.rm = TRUE),  # na.rm = TRUE to remove missing values
n = sum(!is.na(pbaboon)), # of observations, excluding NAs.
se.pbaboon=s.pbaboon/sqrt(n))
x1
#Trying to plot the amount of neutral counts there are for each individual
ggplot(data=x1,
aes(x=cond.f, y=m.pbaboon, fill=id, label=m.pbaboon)) +
geom_bar(stat="identity", position=position_dodge(), color = "black") +
geom_errorbar(aes(ymin=m.pbaboon, ymax=m.pbaboon+se.pbaboon), width=0.2,
position=position_dodge(0.9)) +
scale_fill_manual(values=c("black","white", "light grey", "dark grey")) +
xlab("ID") +
ylab("Number of presentations to baboons") +
ylim(0,15) +
labs(fill="id") +
theme_bw() +
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
legend.title=element_text(size=6),
legend.key=element_blank(),
legend.position=c(0.5,0.95),
legend.text=element_text(size=8),
legend.background=element_blank(),
legend.direction="horizontal",
legend.key.size=unit(0.3, "cm"),
axis.title.y=element_text(size=8),
axis.title.x=element_text(size=8),
axis.text.x=element_text(size=8))
#load data
care=read.table(file="caredata.csv", header=TRUE, sep=",")
names(care)
str(care)
#Packages used
library(nlme)
library(dplyr)
#packages gotten from last years project
library(lattice)
install.packages("lme4")
library(lme4)
library(geepack)
install.packages("lsmeans")
library(lsmeans)
install.packages("dplyr")
library(dplyr)
install.packages("MuMIn")
xx=care[,sapply(care,is.integer)] #this is to make a subset only of the integers (numbers)
xx
install.packages("lsmeans")
#Adding counts and duration of the 3 behavioral type (positive, negative and neutral)
care$positivect=rowSums(care[,c("foodgrunt", "grunt","lipsmack","pbaboon", "phuman","hgroomct","bgroomct","ghgroomct","gbgroomct","penisd", "playb", "plays","manenrichct","embraceh", "embraceb", "dproxct","dproxout", "movetoobs","playvocal")])
install.packages("lsmeans")
care$positivect
care$positived=rowSums(care[,c("hgroomd","bgroomd","ghgroomd","gbgroomd","manenrichd")])
care$positived
care$negativect=rowSums(care[,c("iproxct", "iproxout","threatg", "bark", "headshake", "yawn", "aggb", "pace", "aggdisp", "teeth", "rubgen", "sway", "turn", "scream")])
care$negativect
care$neutralct=rowSums(care[,c("sgroomct", "eatct","drink","foragect", "restct","schratch", "other")])
care$neutralct
care$neutrald=rowSums(care[,c("sgroomd","eatd","foraged","restd")] )6
care$neutrald
care$neutrald=rowSums(care[,c("sgroomd","eatd","foraged","restd")] )
care$neutrald
setwd("~/R Files/Josefine Thesis/Research")
care=read.table(file="caredata.csv", header=TRUE, sep=",")
library(nlme)
library(dplyr)
library(lattice)
library(lme4)
library(geepack)
library(lsmeans)
library(dplyr)
library(MuMIn)
library(ggplot2)
install.packages("geepack")
library(geepack)
library(lsmeans)
install.packages("lsmeans")
library(lsmeans)
library(dplyr)
library(MuMIn)
install.packages("MuMIn")
library(MuMIn)
library(ggplot2)
care$cond.f=as.factor(care$cond)
care$positivect=rowSums(care[,c("foodgrunt", "grunt","lipsmack","pbaboon", "phuman","hgroomct","bgroomct","ghgroomct","gbgroomct","penisd", "playb", "plays","manenrichct","embraceh", "embraceb", "dproxct","dproxout", "movetoobs","playvocal")])
care$positivect
care$positived=rowSums(care[,c("hgroomd","bgroomd","ghgroomd","gbgroomd","manenrichd")])
care$positived
care$positivect
care
care$foodgrunt
str(care)
care$positivect=rowSums(care[,c("foodgrunt", "grunt","lipsmack","pbaboon", "phuman","hgroomct","bgroomct","ghgroomct","gbgroomct","penisd", "playb", "plays","manenrichct","embraceh", "embraceb", "dproxct","dproxout", "movetoobs","playvocal")])
care$positivect
care$hgroomd
help(rowSums)
care$positivect=rowSums(care[,c("foodgrunt", "grunt","lipsmack","pbaboon", "phuman","hgroomct","bgroomct","ghgroomct","gbgroomct","penisd", "playb", "plays","manenrichct","embraceh", "embraceb", "dproxct","dproxout", "movetoobs","playvocal")], na.rm=T)
care$positivect
care$positivect=rowSums(care[,c("foodgrunt", "grunt","lipsmack","pbaboon", "phuman","hgroomct","bgroomct","ghgroomct","gbgroomct","penisd", "playb", "plays","manenrichct","embraceh", "embraceb", "dproxct","dproxout", "movetoobs","playvocal")], na.rm=T)
care$positivect
m2=lme(neutralct~cond.f, random=~1|id,data=care, na.action=na.omit, method="ML")
care$positivect=rowSums(care[,c("foodgrunt", "grunt","lipsmack","pbaboon", "phuman","hgroomct","bgroomct","ghgroomct","gbgroomct","penisd", "playb", "plays","manenrichct","embraceh", "embraceb", "dproxct","dproxout", "movetoobs","playvocal")], na.rm=T)
care$positived=rowSums(care[,c("hgroomd","bgroomd","ghgroomd","gbgroomd","manenrichd")], na.rm=T)
care$negativect=rowSums(care[,c("iproxct", "iproxout","threatg", "bark", "headshake", "yawn", "aggb", "pace", "aggdisp", "teeth", "rubgen", "sway", "turn", "scream")], na.rm=T)
care$neutralct=rowSums(care[,c("sgroomct", "eatct","drink","foragect", "restct","schratch", "other")], na.rm=T)
care$neutrald=rowSums(care[,c("sgroomd","eatd","foraged","restd")], na.rm=T )
m2=lme(neutralct~cond.f, random=~1|id,data=care, na.action=na.omit, method="ML")
summary(m2)
m2=lme(neutralct~cond.f, random=~1|id,data=care, na.action=na.omit, method="ML")
ad.test(residuals(m2))#this one says error
install.packages("nortest")
library(nortest)
ad.test(residuals(m2))#this one says error
install.packages(c("backports", "BH", "boot", "checkmate", "data.table", "digest", "dplyr", "glue", "gridExtra", "Hmisc", "hms", "htmlTable", "htmlwidgets", "knitr", "lazyeval", "lme4", "lmerTest", "MASS", "Matrix", "mgcv", "multcomp", "Rcpp", "RcppEigen", "reshape2", "rlang", "rpart", "scales", "stringi", "tibble", "viridis", "yaml", "zoo"))
install.packages(c("backports", "BH", "boot", "checkmate", "data.table", "digest", "dplyr", "glue", "gridExtra", "Hmisc", "hms", "htmlTable", "htmlwidgets", "knitr", "lazyeval", "lme4", "lmerTest", "MASS", "Matrix", "mgcv", "multcomp", "Rcpp", "RcppEigen", "reshape2", "rlang", "rpart", "scales", "stringi", "tibble", "viridis", "yaml", "zoo"))
install.packages(c("backports", "BH", "boot", "checkmate", "data.table", "digest", "dplyr", "glue", "gridExtra", "Hmisc", "hms", "htmlTable", "htmlwidgets", "knitr", "lazyeval", "lme4", "lmerTest", "MASS", "Matrix", "mgcv", "multcomp", "Rcpp", "RcppEigen", "reshape2", "rlang", "rpart", "scales", "stringi", "tibble", "viridis", "yaml", "zoo"))
install.packages(c("backports", "BH", "boot", "checkmate", "data.table", "digest", "dplyr", "glue", "gridExtra", "Hmisc", "hms", "htmlTable", "htmlwidgets", "knitr", "lazyeval", "lme4", "lmerTest", "MASS", "Matrix", "mgcv", "multcomp", "Rcpp", "RcppEigen", "reshape2", "rlang", "rpart", "scales", "stringi", "tibble", "viridis", "yaml", "zoo"))
install.packages(c("backports", "BH", "boot", "checkmate", "data.table", "digest", "dplyr", "glue", "gridExtra", "Hmisc", "hms", "htmlTable", "htmlwidgets", "knitr", "lazyeval", "lme4", "lmerTest", "MASS", "Matrix", "mgcv", "multcomp", "Rcpp", "RcppEigen", "reshape2", "rlang", "rpart", "scales", "stringi", "tibble", "viridis", "yaml", "zoo"))
m2=lmer(negativect~cond.f+dayofcond.f+observer+focal.f+weather+ctpos+ctenrich+enrich+timetofeed+clean+xtraint+pxtraint+sep+(~1|id),data=care, na.action=na.omit,nbest=4, really.big = T)
library(lme4)
install.packages("lme4")
install.packages("Matrix")
m2=lmer(negativect~cond.f+dayofcond.f+observer+focal.f+weather+ctpos+ctenrich+enrich+timetofeed+clean+xtraint+pxtraint+sep+(~1|id),data=care, na.action=na.omit,nbest=4, really.big = T)
library(lme4)
m2=lmer(negativect~cond.f+dayofcond.f+observer+focal.f+weather+ctpos+ctenrich+enrich+timetofeed+clean+xtraint+pxtraint+sep+(~1|id),data=care, na.action=na.omit,nbest=4, really.big = T)
m2=lmer(negativect~cond.f+dayofcond.f+observer+focal.f+weather+ctpos+ctenrich+enrich+timetofeed+clean+xtraint+pxtraint+sep+(~1|id),data=care, na.action=na.omit)
m2=lmer(negativect~cond.f+dayofcond.f+observer+focal.f+weather+ctpos+ctenrich+enrich+timetofeed+clean+xtraint+pxtraint+sep+(1|id),data=care, na.action=na.omit)
#Negative grouped independent variables test
#load data
care=read.table(file="caredata.csv", header=TRUE, sep=",")
#Putting the 4 condition in as a factor
care$cond.f=as.factor(care$cond)
#Putting the 3 focals in as a factor
care$focal.f=as.factor(care$focal)
#Putting totalday in as condition
care$tday.f=as.factor(care$tday)
#Putting the day of condition in as a factor
care$dayofcond.f=as.factor(care$dayofcond)
#Putting the number of caretakers in as a factor
care$numct.f=as.factor(care$numct)
#Form the negative count
care$negativect=rowSums(care[,c("iproxct", "iproxout","threatg", "bark", "headshake", "yawn", "aggb", "pace", "aggdisp", "teeth", "rubgen", "sway", "turn", "scream")], na.rm=T)
care$negativect
################################################################################################
#Playing with models.
m2=lme(negativect~cond.f+dayofcond.f+observer+focal.f+weather+ctpos+ctenrich+enrich+timetofeed+clean+xtraint+pxtraint+sep, random=~1|id,data=care, na.action=na.omit)
#Library to run
library(nlme)
library(lme4)
################################################################################################
#Playing with models.
m2=lme(negativect~cond.f+dayofcond.f+observer+focal.f+weather+ctpos+ctenrich+enrich+timetofeed+clean+xtraint+pxtraint+sep, random=~1|id,data=care, na.action=na.omit)
m2=lme(negativect~tday.f+numct.f, random=~1|id,data=care, na.action=na.omit)
#so far following independent factor does not wanna work:
#tday.f,numct.f,sexct,ctclean,ctint,timetoenrich,timetoclean
#Dropping factors- Not really sure were to go from here.
drop1(m2, test="Chi")
m2=lme(negativect~cond.f+observer+focal.f+weather+ctpos+ctenrich+enrich+timetofeed+clean+xtraint+pxtraint+sep, random=~1|id,data=care, na.action=na.omit)
step(m2)
summary(glm1 <- lm(cond.f ~ ., data = care))
sglm1 <- step(glm1)
m2=lmer(negativect~cond.f+dayofcond.f+observer+focal.f+weather+ctpos+ctenrich+enrich+timetofeed+clean+xtraint+pxtraint+sep+(~1|id),data=care, na.action=na.omit,nbest=4, really.big = T)
#Final embrace baboon
#load data
care=read.table(file="caredata.csv", header=TRUE, sep=",")
#Putting the 4 condition in as a factor
care$cond.f=as.factor(care$cond)
#Putting the 4 condition in as a factor
care$cond.f=as.factor(care$cond)
#Embrace baboons modelling
m1=gls(embraceb~cond.f, data=care, na.action=na.omit, method="ML")
#model2 - try put individual in as a main factor so cond.f+id
m2=lme(embraceb~cond.f, random=~1|id,data=care, na.action=na.omit, method="ML")
#Now we normalize the model
care$l.embraceb=log(care$embraceb+1)
#Now we run models models with the normalised data
m1n=gls(l.embraceb~cond.f, data=care, na.action=na.omit, method="ML")
#model2 - try put individual in as a main factor so cond.f+id
m2n=lme(l.embraceb~cond.f, random=~1|id,data=care, na.action=na.omit, method="ML")
#P is significant so we run alternate variance structure
vf1=varIdent(form = ~1|id)
vf2=varIdent(form = ~1|cond.f)
#Now used on the normalized model
m2n=lme(l.embraceb~cond.f, random=~1|id,data=care, na.action=na.omit)
M2.1<-lme(l.embraceb~cond.f, random=~1|id,data=care, na.action=na.omit, weights=vf1)
M2.2<-lme(l.embraceb~cond.f, random=~1|id,data=care, na.action=na.omit, weights=vf2)
#Now checking which model is best
anova(m2n,M2.1,M2.2)
#Final embrace baboon
#load data
care=read.table(file="caredata.csv", header=TRUE, sep=",")
#Putting the 4 condition in as a factor
care$cond.f=as.factor(care$cond)
##DOES NOT WANT TO RUN THE MODEL WITH THE WEIGHTS
M2.2<-lmer(l.embraceb~cond.f+focal.f+dayofcond.f+observer+weather+ctpos+ctenrich+enrich+timetofeed+clean+xtraint+sep+pxtraint+(1|id),data=care, na.action=na.omit,weights=vf2)
#Now we normalize the model
care$l.embraceb=log(care$embraceb+1)
##DOES NOT WANT TO RUN THE MODEL WITH THE WEIGHTS
M2.2<-lmer(l.embraceb~cond.f+focal.f+dayofcond.f+observer+weather+ctpos+ctenrich+enrich+timetofeed+clean+xtraint+sep+pxtraint+(1|id),data=care, na.action=na.omit,weights=vf2)
#Now looking at independent variables
#Putting the 4 condition in as a factor
care$cond.f=as.factor(care$cond)
#Putting the 3 focals in as a factor
care$focal.f=as.factor(care$focal)
#Putting totalday in as condition
care$tday.f=as.factor(care$tday)
#Putting the day of condition in as a factor
care$dayofcond.f=as.factor(care$dayofcond)
#Putting the number of caretakers in as a factor
care$numct.f=as.factor(care$numct)
##DOES NOT WANT TO RUN THE MODEL WITH THE WEIGHTS
M2.2<-lmer(l.embraceb~cond.f+focal.f+dayofcond.f+observer+weather+ctpos+ctenrich+enrich+timetofeed+clean+xtraint+sep+pxtraint+(1|id),data=care, na.action=na.omit,weights=vf2)
vf2
#P is significant so we run alternate variance structure
vf1=varIdent(form = ~1|id)
vf2=varIdent(form = ~1|cond.f)
##DOES NOT WANT TO RUN THE MODEL WITH THE WEIGHTS
M2.2<-lmer(l.embraceb~cond.f+focal.f+dayofcond.f+observer+weather+ctpos+ctenrich+enrich+timetofeed+clean+xtraint+sep+pxtraint+(1|id),data=care, na.action=na.omit,weights=vf2)
unique(care$care.f)
unique(care$cond.f)
View(care)
View(care)
