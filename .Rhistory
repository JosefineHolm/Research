panel.grid.minor=element_blank(),
legend.title=element_text(size=6),
legend.key=element_blank(),
legend.position=c(0.5,0.95),
legend.text=element_text(size=8),
legend.background=element_blank(),
legend.direction="horizontal",
legend.key.size=unit(0.3, "cm"),
axis.title.y=element_text(size=8),
axis.title.x=element_text(size=8),
axis.text.x=element_text(size=8))
x1 <- group_by(care, cond.f, id) %>%
summarize(m.positivect = mean(positivect, na.rm = TRUE), # na.rm = TRUE to remove missing values
s.positivect=sd(positivect, na.rm = TRUE),  # na.rm = TRUE to remove missing values
n = sum(!is.na(positivect)), # of observations, excluding NAs.
se.lpositivect=s.positivect/sqrt(n))
x1 <- group_by(care, cond.f, id) %>%
summarize(m.positivect = mean(positivect, na.rm = TRUE), # na.rm = TRUE to remove missing values
s.positivect=sd(positivect, na.rm = TRUE),  # na.rm = TRUE to remove missing values
n = sum(!is.na(positivect)), # of observations, excluding NAs.
se.lpositivect=s.positivect/sqrt(n))
x1
ggplot(data=x1,
aes(x=cond.f, y=m.positivect, fill=id, label=m.positivect)) +
geom_bar(stat="identity", position=position_dodge(), color = "black") +
geom_errorbar(aes(ymin=m.positivect, ymax=m.positivect+se.positivect), width=0.2,
position=position_dodge(0.9)) +
scale_fill_manual(values=c("black","white", "light grey", "dark grey")) +
xlab("ID") +
ylab("Number of all positive behaviors") +
ylim(0,15) +
labs(fill="id") +
theme_bw() +
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
legend.title=element_text(size=6),
legend.key=element_blank(),
legend.position=c(0.5,0.95),
legend.text=element_text(size=8),
legend.background=element_blank(),
legend.direction="horizontal",
legend.key.size=unit(0.3, "cm"),
axis.title.y=element_text(size=8),
axis.title.x=element_text(size=8),
axis.text.x=element_text(size=8))
x1 <- group_by(care, cond.f, id) %>%
summarize(m.positivect = mean(positivect, na.rm = TRUE), # na.rm = TRUE to remove missing values
s.positivect=sd(positivect, na.rm = TRUE),  # na.rm = TRUE to remove missing values
n = sum(!is.na(positivect)), # of observations, excluding NAs.
se.positivect=s.positivect/sqrt(n))
x1
ggplot(data=x1,
aes(x=cond.f, y=m.positivect, fill=id, label=m.positivect)) +
geom_bar(stat="identity", position=position_dodge(), color = "black") +
geom_errorbar(aes(ymin=m.positivect, ymax=m.positivect+se.positivect), width=0.2,
position=position_dodge(0.9)) +
scale_fill_manual(values=c("black","white", "light grey", "dark grey")) +
xlab("ID") +
ylab("Number of positivects") +
ylim(0,15) +
labs(fill="id") +
theme_bw() +
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
legend.title=element_text(size=6),
legend.key=element_blank(),
legend.position=c(0.5,0.95),
legend.text=element_text(size=8),
legend.background=element_blank(),
legend.direction="horizontal",
legend.key.size=unit(0.3, "cm"),
axis.title.y=element_text(size=8),
axis.title.x=element_text(size=8),
axis.text.x=element_text(size=8))
care$positivect=rowSums(care[,c("foodgrunt", "grunt","lipsmack","pbaboon", "phuman","hgroomct","bgroomct","ghgroomct","gbgroomct","penisd", "playb", "plays","manenrichct","embraceh", "embraceb", "dproxct","dproxout", "movetoobs","playvocal")], na.rm=T)
care$positivect
x1 <- group_by(care, cond.f, id) %>%
summarize(m.positivect = mean(positivect, na.rm = TRUE), # na.rm = TRUE to remove missing values
s.positivect=sd(positivect, na.rm = TRUE),  # na.rm = TRUE to remove missing values
n = sum(!is.na(positivect)), # of observations, excluding NAs.
se.positivect=s.positivect/sqrt(n))
x1
ggplot(data=x1,
aes(x=cond.f, y=m.positivect, fill=id, label=m.positivect)) +
geom_bar(stat="identity", position=position_dodge(), color = "black") +
geom_errorbar(aes(ymin=m.positivect, ymax=m.positivect+se.positivect), width=0.2,
position=position_dodge(0.9)) +
scale_fill_manual(values=c("black","white", "light grey", "dark grey")) +
xlab("ID") +
ylab("Number of positivects") +
ylim(0,15) +
labs(fill="id") +
theme_bw() +
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
legend.title=element_text(size=6),
legend.key=element_blank(),
legend.position=c(0.5,0.95),
legend.text=element_text(size=8),
legend.background=element_blank(),
legend.direction="horizontal",
legend.key.size=unit(0.3, "cm"),
axis.title.y=element_text(size=8),
axis.title.x=element_text(size=8),
axis.text.x=element_text(size=8))
care=read.table(file="caredata.csv", header=TRUE, sep=",")
str(care)
care$cond.f=as.factor(care$cond)
str(care)
#load data
care=read.table(file="caredata.csv", header=TRUE, sep=",")
names(care)
str(care)
install.packages("nlme")
install.packages("nlme")
install.packages("lme4")
install.packages("geepack")
install.packages("lsmeans")
install.packages("lsmeans")
install.packages("dplyr")
install.packages("MuMIn")
install.packages("ggplot2")
install.packages("nortest")
install.packages("multcomp")
install.packages("multcomp")
library(nlme)
library(dplyr)
library(lattice)
library(lme4)
library(geepack)
library(lsmeans)
library(dplyr)
library(MuMIn)
library(ggplot2)
library(nortest)
library(multcomp)
care$cond.f=as.factor(care$cond)
str(care)
care$cond.f=as.factor(care$cond)
str(care)
care$positivect=rowSums(care[,c("foodgrunt", "grunt","lipsmack","pbaboon", "phuman","hgroomct","bgroomct","ghgroomct","gbgroomct","penisd", "playb", "plays","manenrichct","embraceh", "embraceb", "dproxct","dproxout", "movetoobs","playvocal")], na.rm=T)
care$positivect
care$positived=rowSums(care[,c("hgroomd","bgroomd","ghgroomd","gbgroomd","manenrichd")], na.rm=T)
care$positived
care$negativect=rowSums(care[,c("iproxct", "iproxout","threatg", "bark", "headshake", "yawn", "aggb", "pace", "aggdisp", "teeth", "rubgen", "sway", "turn", "scream")], na.rm=T)
care$negativect
care$neutralct=rowSums(care[,c("sgroomct", "eatct","drink","foragect", "restct","schratch", "other")], na.rm=T)
care$neutralct
care$neutrald=rowSums(care[,c("sgroomd","eatd","foraged","restd")], na.rm=T )
care$neutrald
#Now running the statitics for the different blocks
#######################################################################
#Positive count behaviors
#model one without random factor
m1=gls(positivect~cond.f, data=care, na.action=na.omit, method="ML")
#model2 - try put individual in as a main factor so cond.f+id
m2=lme(positivect~cond.f, random=~1|id,data=care, na.action=na.omit, method="ML")
#Normalizing
care$l.positivect=log(care$positivect+1)
#Now we run same models with the normalised data
m1n=gls(l.positivect~cond.f, data=care, na.action=na.omit, method="ML")
#model2 - try put individual in as a main factor so cond.f+id
m2n=lme(l.positivect~cond.f, random=~1|id,data=care, na.action=na.omit, method="ML")
anova(m1n,m2n)
#Test variance equality if the p is sign run alternate variance structure
bartlett.test(l.positivect~id, data=care)
#P is significant so we run alternate variance structure
vf1=varIdent(form = ~1|id)
vf2=varIdent(form = ~1|cond.f)
m2n=lme(l.positivect~cond.f, random=~1|id,data=care, na.action=na.omit)
M2.1<-lme(l.positivect~cond.f, random=~1|id,data=care, na.action=na.omit, weights=vf1)
M2.2<-lme(l.positivect~cond.f, random=~1|id,data=care, na.action=na.omit, weights=vf2)
anova(m2n,M2.1,M2.2)
#M2.1 is the better model
#Now checking for significant results
model.matrix.gls <- function(M2.1, ...){
model.matrix(terms(M2.1), data = getData(M2.1), ...)
}
model.frame.gls <- function(M2.1, ...){
model.frame(formula(M2.1), data = getData(M2.1), ...)
}
terms.gls <- function(M2.1, ...){
terms(model.frame(M2.1),...)
}
multCompTukey <- glht(M2.1, linfct = mcp(cond.f = "Tukey"))
summary(multCompTukey)
#There are significant difference between cond 1-2, 1-3. There are less counted positive behaviors in cond 2 and 3 than 1.
#Looking at residuals
op=par(mfrow=c(2,2), mar=c(5,4,1,2))
x1 <- group_by(care, cond.f, id) %>%
summarize(m.positivect = mean(positivect, na.rm = TRUE), # na.rm = TRUE to remove missing values
s.positivect=sd(positivect, na.rm = TRUE),  # na.rm = TRUE to remove missing values
n = sum(!is.na(positivect)), # of observations, excluding NAs.
se.positivect=s.positivect/sqrt(n))
x1
ggplot(data=x1,
aes(x=cond.f, y=m.positivect, fill=id, label=m.positivect)) +
geom_bar(stat="identity", position=position_dodge(), color = "black") +
geom_errorbar(aes(ymin=m.positivect, ymax=m.positivect+se.positivect), width=0.2,
position=position_dodge(0.9)) +
scale_fill_manual(values=c("black","white", "light grey", "dark grey")) +
xlab("ID") +
ylab("Number of positivects") +
ylim(0,15) +
labs(fill="id") +
theme_bw() +
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
legend.title=element_text(size=6),
legend.key=element_blank(),
legend.position=c(0.5,0.95),
legend.text=element_text(size=8),
legend.background=element_blank(),
legend.direction="horizontal",
legend.key.size=unit(0.3, "cm"),
axis.title.y=element_text(size=8),
axis.title.x=element_text(size=8),
axis.text.x=element_text(size=8))
care$cond.f=as.factor(care$cond)
str(care)
#Embrace baboons modelling
m1=gls(embraceb~cond.f, data=care, na.action=na.omit, method="ML")
summary(m1)
#model2 - try put individual in as a main factor so cond.f+id
m2=lme(embraceb~cond.f, random=~1|id,data=care, na.action=na.omit, method="ML")
summary(m2)
anova(m1,m2)
#The models are not significant but M2 has a lower AIC score so we use that.
#Plotting residuals for m2 to check if we can use this model
op=par(mfrow=c(2,2), mar=c(5,4,1,2))
plot(m2, add.smooth=FALSE, which=1)
E=resid(m2)
hist(E,xlab="residuals", main="")
plot(filter(care, !is.na(embraceb)) %>% dplyr::select(id), #this code will filter NAs out.  it's best to use this nested in the plot command all the time
E, xlab="Treatment", ylab="residuals")
plot(filter(care, !is.na(embraceb)) %>% dplyr::select(cond.f), #this code will filter NAs out.  it's best to use this nested in the plot command all the time
E, xlab="Treatment", ylab="residuals")
qqnorm(residuals(m2))
qqline(residuals(m2))
ad.test(residuals(m2))#This ad.test is also significant P=2.2*10^-16
summary(m2)
#Now we normalize the model
care$l.embraceb=log(care$embraceb+1)
#Now we run models models with the normalised data
m1n=gls(l.embraceb~cond.f, data=care, na.action=na.omit, method="ML")
summary(m1)
#model2 - try put individual in as a main factor so cond.f+id
m2n=lme(l.embraceb~cond.f, random=~1|id,data=care, na.action=na.omit, method="ML")
summary(m2)
anova(m1,m2)
#Plotting residuals for normalized model
op=par(mfrow=c(2,2), mar=c(5,4,1,2))
plot(m2n, add.smooth=FALSE, which=1)
E=resid(m2n)
hist(E,xlab="residuals", main="")
plot(filter(care, !is.na(l.embraceb)) %>% dplyr::select(id), #this code will filter NAs out.  it's best to use this nested in the plot command all the time
E, xlab="Treatment", ylab="residuals")
plot(filter(care, !is.na(l.embraceb)) %>% dplyr::select(cond.f), #this code will filter NAs out.  it's best to use this nested in the plot command all the time
E, xlab="Treatment", ylab="residuals")
qqnorm(residuals(m2n))
qqline(residuals(m2n))
ad.test(residuals(m2n))#This ad.test is also significant P=2.2*10^-16
summary(m2n)
#Test variance equality if the p is sign run alternate variance structure
bartlett.test(l.embraceb~id, data=care)
#P is significant so we run alternate variance structure
vf1=varIdent(form = ~1|id)
vf2=varIdent(form = ~1|cond.f)
#Now used on the normalized model
m2n=lme(l.embraceb~cond.f, random=~1|id,data=care, na.action=na.omit)
M2.1<-lme(l.embraceb~cond.f, random=~1|id,data=care, na.action=na.omit, weights=vf1)
M2.2<-lme(l.embraceb~cond.f, random=~1|id,data=care, na.action=na.omit, weights=vf2)
#Now checking which model is best
anova(m2n,M2.1,M2.2)
#M2.2 is significantly better to use.
#Plotting residuals for normalized model M2.2
op=par(mfrow=c(2,2), mar=c(5,4,1,2))
plot(M2.2, add.smooth=FALSE, which=1)
E=resid(M2.2)
hist(E,xlab="residuals", main="")
plot(filter(care, !is.na(embraceb)) %>% dplyr::select(id), #this code will filter NAs out.  it's best to use this nested in the plot command all the time
E, xlab="Treatment", ylab="residuals")
plot(filter(care, !is.na(embraceb)) %>% dplyr::select(cond.f), #this code will filter NAs out.  it's best to use this nested in the plot command all the time
E, xlab="Treatment", ylab="residuals")
qqnorm(residuals(M2.2))
qqline(residuals(M2.2))
ad.test(residuals(M2.2))
summary(M2.2)
#Now we check for significant results.
model.matrix.gls <- function(M2.2, ...){
model.matrix(terms(M2.2), data = getData(M2.2), ...)
}
model.frame.gls <- function(M2.2, ...){
model.frame(formula(M2.2), data = getData(M2.2), ...)
}
terms.gls <- function(M2.2, ...){
terms(model.frame(M2.2),...)
}
multCompTukey <- glht(M2.2, linfct = mcp(cond.f = "Tukey"))
summary(multCompTukey)
#There are significant differences between cond 1-3, and 1-4 there being more embraces in cond 3 and 4 than 1.
lsmeans(M2.2,pairwise~cond.f)
#Now we check for autocorrelation
#Plotting x with the model
x<-care$l.embraceb[!is.na(care$embraceb)]#removes na values from column
E2<-residuals(M2.2,type="normalized")
plot(x, E2)
#residuals v observation
#check for autocorrelation
acf(E2, na.action=na.pass,
main="Auto-correlation plot for residuals")
#There are no autocorrelation.
ggplot(data=x1,
aes(x=cond.f, y=m.embraceb, fill=id, label=m.embraceb)) +
geom_bar(stat="identity", position=position_dodge(), color = "black") +
geom_errorbar(aes(ymin=m.embraceb, ymax=m.embraceb+se.embraceb), width=0.2,
position=position_dodge(0.9)) +
scale_fill_manual(values=c("black","white", "light grey", "dark grey")) +
xlab("ID") +
ylab("Embraces") +
ylim(0,15) +
labs(fill="id") +
theme_bw() +
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
legend.title=element_text(size=6),
legend.key=element_blank(),
legend.position=c(0.5,0.95),
legend.text=element_text(size=8),
legend.background=element_blank(),
legend.direction="horizontal",
legend.key.size=unit(0.3, "cm"),
axis.title.y=element_text(size=8),
axis.title.x=element_text(size=8),
axis.text.x=element_text(size=8))
#Now looking at independent variables
#Putting the 4 condition in as a factor
care$cond.f=as.factor(care$cond)
#Putting the 3 focals in as a factor
care$focal.f=as.factor(care$focal)
#Putting totalday in as condition
care$tday.f=as.factor(care$tday)
#Putting the day of condition in as a factor
care$dayofcond.f=as.factor(care$dayofcond)
#Putting the number of caretakers in as a factor
care$numct.f=as.factor(care$numct)
str(care)
##DOES NOT WANT TO RUN THE MODEL WITH THE WEIGHTS
M2.2<-lmer(l.embraceb~cond.f+focal.f+dayofcond.f+observer+weather+ctpos+ctenrich+enrich+timetofeed+clean+xtraint+sep+pxtraint+(1|id),data=care, na.action=na.omit,weights=vf2)
M2.2<-lmer(l.embraceb~cond.f+focal.f+dayofcond.f+observer+weather+ctpos+ctenrich+enrich+timetofeed+clean+xtraint+sep+pxtraint+(1|id),data=care, na.action=na.omit)
ggplot(data=x1,
aes(x=cond.f, y=m.positivect, fill=id, label=m.positivect)) +
geom_bar(stat="identity", position=position_dodge(), color = "black") +
geom_errorbar(aes(ymin=m.positivect, ymax=m.positivect+se.positivect), width=0.2,
position=position_dodge(0.9)) +
scale_fill_manual(values=c("black","white", "light grey", "dark grey")) +
xlab("ID") +
ylab("Number of positivects") +
ylim(0,15) +
labs(fill="id") +
theme_bw() +
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
legend.title=element_text(size=6),
legend.key=element_blank(),
legend.position=c(0.5,0.95),
legend.text=element_text(size=8),
legend.background=element_blank(),
legend.direction="horizontal",
legend.key.size=unit(0.3, "cm"),
axis.title.y=element_text(size=8),
axis.title.x=element_text(size=8),
axis.text.x=element_text(size=8))
m1=gls(eatd~cond.f, data=care, na.action=na.omit, method="ML")
summary(m1)
#model2 - try put individual in as a main factor so cond.f+id
m2=lme(eatd~cond.f, random=~1|id,data=care, na.action=na.omit, method="ML")
summary(m2)
care$l.eatd=log(care$eatd+1)
m2n=lme(l.eatd~cond.f, random=~1|id,data=care, na.action=na.omit, method="ML")
vf1=varIdent(form = ~1|id)
vf2=varIdent(form = ~1|cond.f)
m2n=lme(l.eatd~cond.f, random=~1|id,data=care, na.action=na.omit)
M2.1<-lme(l.eatd~cond.f, random=~1|id,data=care, na.action=na.omit, weights=vf1)
M2.2<-lme(l.eatd~cond.f, random=~1|id,data=care, na.action=na.omit, weights=vf2)
M2.2<-lme(l.eatd~cond.f+focal.f+dayofcond.f+observer+weather+ctpos+ctenrich+enrich+timetofeed+clean+xtraint+sep+pxtraint+(1|id),data=care, na.action=na.omit,weights=vf2
M2.2<-lme(l.eatd~cond.f+focal.f+dayofcond.f+observer+weather+ctpos+ctenrich+enrich+timetofeed+clean+xtraint+sep+pxtraint+(1|id),data=care, na.action=na.omit,weights=vf2
M2.2<-lme(l.eatd~cond.f+focal.f+dayofcond.f+observer+weather+ctpos+ctenrich+enrich+timetofeed+clean+xtraint+sep+pxtraint+(1|id),data=care, na.action=na.omit,weights=vf2)
M2.2<-lme(l.eatd~cond.f+focal.f+dayofcond.f+observer+weather+ctpos+ctenrich+enrich+timetofeed+clean+xtraint+sep+pxtraint+(1|id),data=care, na.action=na.omit,weights=vf2)
#check for autocorrelation
acf(E2, na.action=na.pass,
main="Auto-correlation plot for residuals")
x1 <- group_by(care, cond.f, id) %>%
summarize(m.positivect = mean(positivect, na.rm = TRUE), # na.rm = TRUE to remove missing values
s.positivect=sd(positivect, na.rm = TRUE),  # na.rm = TRUE to remove missing values
n = sum(!is.na(positivect)), # of observations, excluding NAs.
se.positivect=s.positivect/sqrt(n))
x1
ggplot(data=x1,
aes(x=cond.f, y=m.positivect, fill=id, label=m.positivect)) +
geom_bar(stat="identity", position=position_dodge(), color = "black") +
geom_errorbar(aes(ymin=m.positivect, ymax=m.positivect+se.positivect), width=0.2,
position=position_dodge(0.9)) +
scale_fill_manual(values=c("black","white", "light grey", "dark grey")) +
xlab("ID") +
ylab("Number of positivects") +
ylim(0,15) +
labs(fill="id") +
theme_bw() +
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
legend.title=element_text(size=6),
legend.key=element_blank(),
legend.position=c(0.5,0.95),
legend.text=element_text(size=8),
legend.background=element_blank(),
legend.direction="horizontal",
legend.key.size=unit(0.3, "cm"),
axis.title.y=element_text(size=8),
axis.title.x=element_text(size=8),
axis.text.x=element_text(size=8))
anova(m2n,M2.1,M2.2)
git(pull)
care=read.table(file="caredata.csv", header=TRUE, sep=",")
names(care)
str(care)
install.packages("nlme")
install.packages("nlme")
install.packages("lme4")
install.packages("geepack")
install.packages("lsmeans")
install.packages("lsmeans")
install.packages("dplyr")
install.packages("MuMIn")
install.packages("ggplot2")
install.packages("nortest")
install.packages("multcomp")
install.packages("multcomp")
library(nlme)
library(dplyr)
#packages gotten from last years project
library(lattice)
library(lme4)
library(geepack)
library(lsmeans)
library(dplyr)
library(MuMIn)
library(ggplot2)
library(nortest)
library(multcomp)
care$cond.f=as.factor(care$cond)
x <- group_by(care, id, cond, tday) %>%  # Grouping function causes subsequent functions to aggregate by season and reach
summarize(grunt.m = mean(grunt, na.rm
x <- group_by(care, id, cond, tday) %>%  # Grouping function causes subsequent functions to aggregate by season and reach
summarize(grunt.m = mean(grunt, na.rm = TRUE)) # na.rm = TRUE to remove missing values
care=read.table(file="caredata.csv", header=TRUE, sep=",")
names(care)
str(care)
x <- group_by(care, id, cond, tday) %>%  # Grouping function causes subsequent functions to aggregate by season and reach
summarize(grunt.m = mean(grunt, na.rm = TRUE))
avg <- group_by(x, id, cond) %>%
summarize(grunt.m = mean(grunt.m, na.rm = TRUE))
baseline<-subset(avg, cond==1)
responses<-subset(x, cond!=1)
ayana.resp<-subset(responses, id=="ayana")
stevie.resp<-subset(responses, id=="stevie")
hope.resp<-subset(responses, id=="hope ")
patats.resp<-subset(responses, id=="patats")
base.ayana<-subset(baseline, id=="ayana")
ayana.resp$grunt.brr=ayana.resp$grunt.m/base.ayana$grunt.m
base.stevie<-subset(baseline, id=="stevie")
stevie.resp$grunt.brr=stevie.resp$grunt.m/base.stevie$grunt.m
base.hope<-subset(baseline, id=="hope ")
hope.resp$grunt.brr=hope.resp$grunt.m/base.hope$grunt.m
base.patats<-subset(baseline, id=="patats")
patats.resp$grunt.brr=patats.resp$grunt.m/base.patats$grunt.m
x.p <- group_by(ayana.resp, cond) %>%  # Grouping function causes subsequent functions to aggregate by season and reach
summarize(grunt.brr.m = mean(grunt.brr, na.rm = TRUE), # na.rm = TRUE to remove missing values
grunt.brr.sd=sd(grunt.brr, na.rm = TRUE),  # na.rm = TRUE to remove missing values
n = sum(!is.na(grunt.brr)), # of observations, excluding NAs.
grunt.brr.se=grunt.brr.sd/sqrt(n))
library(ggplot2)
ggplot(data=x.p, aes(x=cond, y=grunt.brr.m)) +
geom_bar(stat="identity", position=position_dodge(), color = "black") +
geom_errorbar(aes(ymin=grunt.brr.m, ymax=grunt.brr.m + grunt.brr.se), width=0.2,
position=position_dodge(0.9)) +
scale_fill_manual(values=c("black")) +
xlab("Condition") +
ylab("Behavior Response Ratio") +
ylim(0,2) +
theme_bw() +
geom_hline(yintercept = 1) +
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
axis.title.y=element_text(size=8),
axis.title.x=element_text(size=8),
axis.text.x=element_text(size=8))
ggplot(data=x.p, aes(x=cond, y=grunt.brr.m)) +
geom_bar(stat="identity", position=position_dodge(), color = "black") +
geom_errorbar(aes(ymin=grunt.brr.m, ymax=grunt.brr.m + grunt.brr.se), width=0.2,
position=position_dodge(0.9)) +
scale_fill_manual(values=c("black")) +
xlab("Condition") +
ylab("Behavior Response Ratio") +
ylim(0,2) +
theme_bw() +
geom_hline(yintercept = 1) +
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
axis.title.y=element_text(size=8),
axis.title.x=element_text(size=8),
axis.text.x=element_text(size=8))
